/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SandboxImport } from './routes/sandbox'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as GithubCallbackImport } from './routes/github/callback'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SandboxRoute = SandboxImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const GithubCallbackRoute = GithubCallbackImport.update({
  id: '/github/callback',
  path: '/github/callback',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxImport
      parentRoute: typeof rootRoute
    }
    '/github/callback': {
      id: '/github/callback'
      path: '/github/callback'
      fullPath: '/github/callback'
      preLoaderRoute: typeof GithubCallbackImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/sandbox': typeof SandboxRoute
  '/github/callback': typeof GithubCallbackRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/sandbox': typeof SandboxRoute
  '/github/callback': typeof GithubCallbackRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/sandbox': typeof SandboxRoute
  '/github/callback': typeof GithubCallbackRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/sandbox' | '/github/callback'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/sandbox' | '/github/callback'
  id: '__root__' | '/' | '/dashboard' | '/sandbox' | '/github/callback'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRoute
  SandboxRoute: typeof SandboxRoute
  GithubCallbackRoute: typeof GithubCallbackRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRoute,
  SandboxRoute: SandboxRoute,
  GithubCallbackRoute: GithubCallbackRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/sandbox",
        "/github/callback"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/sandbox": {
      "filePath": "sandbox.tsx"
    },
    "/github/callback": {
      "filePath": "github/callback.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
